//
//  FinderWorker.swift
//  LightComicsV2
//
//  Created by LeeSeGun on 2021/12/20.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FileKit

class FinderWorker {
    
    init() {
//        makeSampleFiles()
    }
    
    func makeSampleFiles() {
        let path = Path.userDocuments
        for i in 0...4 {
            let dirPath = path + "Dir \(i)"
            try? dirPath.createDirectory()
        }

        for i in 0...4 {
            let dirPath = path + "File \(i).txt"
            try? dirPath.createFile()
        }
    }
    
    
    /// 디렉토리를 생성한다.
    /// - Parameters:
    ///   - parent: 대상
    ///   - dirName: 디렉토리명
    func makeDirectory(in parent: Path, dirName: String) throws {
        let new = parent + dirName
        try new.createDirectory()
    }
    
    
    /// 요청 경로에 자식들을 반환한다.
    /// - Parameters:
    ///   - path: 대상
    ///   - completion: completion description
    func fetchPathElements(in path: Path, completion: @escaping ([Path]) -> Void) {
        completion(path.children())
    }

    
    /// 파일명을 변경한다.
    /// - Parameter request: Finder.RenameFile.Request
    @discardableResult func renameFile(path: Path, name: String) throws -> Path {
        let raw = path.resolved.rawValue.replacingOccurrences(of: path.fileName, with: name)
        let new = Path(rawValue: raw).resolved
        try path.moveFile(to: new)
        return new
    }

    
    /// 파일을 이동한다
    /// - Parameters:
    ///   - path: 대상 폴더
    ///   - filePaths: 대상 경로들
    func moveFiles(to path: Path, filePaths: [Path]) throws {
        try filePaths.forEach { p in
            let new = path + p.fileName
            try p.moveFile(to: new)
        }
    }
    
    
    /// 파일을 삭제한다.
    /// - Parameter path: 대상
    func moveTrash(to path: Path) throws {
        try path.deleteFile()
    }
    
}
/*
 코어데이터나 서버와 통신이 필요할 경우, Interactor에서 처리하는 것이 아닌 Worker에서 처리하도록 분리할 수 있다.
 Worker에서 필요한 값을 fetch한 후에 Interactor로 넘겨주게 된다.
 외부 라이브러리를 사용해야 하는 경우 Worker로 빼두어야 한다.
 */
