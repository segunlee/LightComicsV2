//
//  FinderInteractor.swift
//  LightComicsV2
//
//  Created by LeeSeGun on 2021/12/20.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FileKit

protocol FinderBusinessLogic {
    func fetchFiles(request: Finder.FetchFiles.Request)
    func updateSortRule(request: Finder.UpdateSortRule.Request)
    func makeDirectory(request: Finder.MakeDirectory.Request)
}

protocol FinderDataStore {
    var currentPath: Path { get set }
}

class FinderInteractor: FinderBusinessLogic, FinderDataStore {
    var presenter: FinderPresentationLogic?
    var worker: FinderWorker = FinderWorker()
    var currentPath: Path = Path.userDocuments
    
    
    // MARK: Fetch Files
    func fetchFiles(request: Finder.FetchFiles.Request) {
        print("fetch files in \(request.path.tildify)")
        worker.fetchPathElements(request: request, completion: { [weak self] paths in
            self?.presenter?.presentFiles(response: .init(elements: paths))
        })
    }
    
    
    // MARK: Update Sort Rule
    func updateSortRule(request: Finder.UpdateSortRule.Request) {
        if Finder.currentSortRule == request.rule {
            Finder.currentSortOrder = Finder.currentSortOrder == .ASC ? .DESC : .ASC
        } else {
            Finder.currentSortRule = request.rule
            Finder.currentSortOrder = .ASC
        }
        fetchFiles(request: .init(path: currentPath))
    }
    
    // MARK: Make Directory
    func makeDirectory(request: Finder.MakeDirectory.Request) {
        do {
            try worker.makeDirectory(in: request.parent, dirName: request.dirName)
            fetchFiles(request: .init(path: currentPath))
        } catch let error {
            print(error)
        }
    }
}


/*
 ViewController는 Interactor에 있는 비즈니스 로직 호출을 할 때 Request에 필요한 데이터를 담아 넘겨준다.
 Interactor에서는 필요한 로직을 처리한 뒤에 그 결과값을 Response에 담아 Presenter에 넘겨준다.
 마지막으로 Presenter는 ViewController가 화면에 정상적으로 값을 표현할 수 있도록 Response의 데이터를 가공해 ViewModel에 담아 ViewController로 넘겨주면 ViewController에서 화면 갱신
 */
